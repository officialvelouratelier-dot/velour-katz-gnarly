// src/components/LuckyDraw.tsx
"use client";

import React, { useEffect, useRef, useState } from "react";
import { CARDS, RARITY_LIST, RARITY_WEIGHTS, type Card, type Rarity } from "@/data/cards";
import MiniGameLever from "./MiniGameLever";

// pick card based on weights
function pickCard(): Card {
  const buckets: Record<Rarity, Card[]> = { Common: [], Uncommon: [], Rare: [], Legendary: [] };
  CARDS.forEach((c) => buckets[c.rarity].push(c));

  const total = Object.values(RARITY_WEIGHTS).reduce((s, n) => s + n, 0);
  let roll = Math.random() * total;
  let chosen: Rarity = "Common";

  for (const rarity of RARITY_LIST) {
    if (roll < RARITY_WEIGHTS[rarity]) {
      chosen = rarity;
      break;
    }
    roll -= RARITY_WEIGHTS[rarity];
  }

  const pool = buckets[chosen];
  return pool[Math.floor(Math.random() * pool.length)];
}

// helpers for save image
function drawRoundedRect(ctx: CanvasRenderingContext2D, x: number, y: number, w: number, h: number, r: number) {
  const rr = Math.min(r, w / 2, h / 2);
  ctx.beginPath();
  ctx.moveTo(x + rr, y);
  ctx.arcTo(x + w, y, x + w, y + h, rr);
  ctx.arcTo(x + w, y + h, x, y + h, rr);
  ctx.arcTo(x, y + h, x, y, rr);
  ctx.arcTo(x, y, x + w, y, rr);
  ctx.closePath();
}

function coverFit(sw: number, sh: number, dw: number, dh: number) {
  const s = Math.max(dw / sw, dh / sh);
  const w = sw * s;
  const h = sh * s;
  const dx = (dw - w) / 2;
  const dy = (dh - h) / 2;
  return { dx, dy, dw: w, dh: h };
}

const rarityGlow: Record<Rarity, string> = {
  Common: "rgba(180,200,255,0.65)",
  Uncommon: "rgba(120,220,180,0.75)",
  Rare: "rgba(120,160,255,0.85)",
  Legendary: "rgba(255,225,140,0.95)",
};

export default function LuckyDraw() {
  const [revealed, setRevealed] = useState<Card | null>(null);
  const [flipping, setFlipping] = useState(false);
  const [showMini, setShowMini] = useState(false);

  // sounds
  const sfxPull = useRef<HTMLAudioElement | null>(null);
  const sfxFlip = useRef<HTMLAudioElement | null>(null);
  const sfxLegend = useRef<HTMLAudioElement | null>(null);
  const sfxClick = useRef<HTMLAudioElement | null>(null);

  useEffect(() => {
    sfxPull.current = new Audio("/sfx/pull.mp3");
    sfxFlip.current = new Audio("/sfx/flip.mp3");
    sfxLegend.current = new Audio("/sfx/legendary.mp3");
    sfxClick.current = new Audio("/sfx/click.mp3");
  }, []);

  const doPull = () => {
    if (flipping) return;
    sfxPull.current?.play().catch(() => {});
    setFlipping(true);
    setTimeout(() => {
      sfxFlip.current?.play().catch(() => {});
      const card = pickCard();
      setRevealed(card);
      setFlipping(false);
      if (card.rarity === "Legendary") {
        sfxLegend.current?.play().catch(() => {});
        setShowMini(true);
      }
    }, 600);
  };

  const saveCard = async () => {
    if (!revealed) return;
    sfxClick.current?.play().catch(() => {});

    const canvas = document.createElement("canvas");
    const W = 800,
      H = 1120;
    canvas.width = W;
    canvas.height = H;
    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    ctx.fillStyle = "#0b0e13";
    ctx.fillRect(0, 0, W, H);

    const pad = 36;
    const cardW = W - pad * 2;
    const cardH = H - pad * 2 - 120;

    drawRoundedRect(ctx, pad, pad, cardW, cardH, 24);
    ctx.fillStyle = "#0f1219";
    ctx.fill();
    ctx.strokeStyle = rarityGlow[revealed.rarity];
    ctx.lineWidth = 8;
    ctx.stroke();

    const img = new Image();
    img.crossOrigin = "anonymous";
    img.src = revealed.image;
    await new Promise<void>((res) => {
      img.onload = () => res();
      img.onerror = () => res();
    });

    if (img.width && img.height) {
      const fit = coverFit(img.width, img.height, cardW - 16, cardH - 16);
      ctx.save();
      drawRoundedRect(ctx, pad + 8, pad + 8, cardW - 16, cardH - 16, 18);
      ctx.clip();
      ctx.drawImage(img, pad + 8 + fit.dx, pad + 8 + fit.dy, fit.dw, fit.dh);
      ctx.restore();
    }

    ctx.fillStyle = "#e9eefc";
    ctx.font = "700 44px Inter, ui-sans-serif";
    ctx.fillText(`${revealed.name} â€” ${revealed.group}`, pad, H - 60);

    ctx.font = "600 36px Inter, ui-sans-serif";
    ctx.fillStyle = rarityGlow[revealed.rarity];
    ctx.fillText(revealed.rarity.toUpperCase(), pad, H - 18);

    const url = canvas.toDataURL("image/png");
    const a = document.createElement("a");
    a.href = url;
    a.download = `${revealed.name}-${revealed.rarity}.png`;
    a.click();
  };

  return (
    <div className="relative w-[min(92vw,420px)] aspect-[9/16] bg-[#0b0f15] rounded-2xl flex flex-col items-center justify-center text-center shadow-xl border border-white/10">
      {/* Card area */}
      <div
        className={`w-[65%] aspect-[63/88] bg-black/30 rounded-xl flex items-center justify-center transition-transform duration-500 ${
          flipping ? "rotate-y-180" : ""
        }`}
        style={{ transformStyle: "preserve-3d" }}
      >
        {revealed ? (
          <img
            src={revealed.image}
            alt={revealed.name}
            className="w-full h-full object-cover rounded-xl ring-2"
            style={{
              boxShadow: `0 0 24px ${rarityGlow[revealed.rarity]}`,
              borderColor: rarityGlow[revealed.rarity],
            }}
          />
        ) : (
          <div className="w-full h-full rounded-xl bg-white/5 border border-white/10" />
        )}
      </div>

      {/* Buttons */}
      <div className="mt-5 flex gap-3">
        <button
          onClick={doPull}
          className="px-4 py-2 rounded-xl bg-white text-black font-semibold hover:scale-[1.02] active:scale-[0.98] transition"
        >
          Pull
        </button>
        {revealed && (
          <>
            <button
              onClick={saveCard}
              className="px-4 py-2 rounded-xl bg-white text-black font-semibold hover:scale-[1.02] active:scale-[0.98] transition"
            >
              Save Photo
            </button>
            <button
              onClick={() => {
                sfxClick.current?.play().catch(() => {});
                setRevealed(null);
              }}
              className="px-4 py-2 rounded-xl bg-white/10 text-white hover:bg-white/15"
            >
              Pull Again
            </button>
          </>
        )}
      </div>

      {/* Mini-game overlay for Legendary */}
      <MiniGameLever
        open={showMini}
        onClose={() => setShowMini(false)}
        sfxPull={sfxPull.current}
        sfxFlip={sfxFlip.current}
        sfxLegend={sfxLegend.current}
        sfxClick={sfxClick.current}
      />

      <style jsx>{`
        .rotate-y-180 {
          transform: rotateY(180deg);
        }
      `}</style>
    </div>
  );
}
